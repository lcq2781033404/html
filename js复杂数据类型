一.简介
简单数据类型存储在内存的栈中，复杂数据类型（Object）存储在内存的堆中。
当栈中的变量超出作用域时，系统自动将其在栈中释放，而堆中的数据则需要程序语言手动将其创建或者销毁（底层语言，目前的高级语言具备释放机制）。
js中没有堆和栈的概念。

二.简单数据类型和复杂数据类型如何在内存中存储
1.简单数据类型
（1）创建简单数据类型变量的时候会在栈中开辟一个存储该变量的空间。比如：
var n1 = 1;
var n2 = n1;
上面的语句会在栈中开辟两个空间。所以这两个变量不会互相影响，改变了n1的值不会对n2的值产生影响。
（2）简单类型作为函数的参数，在内存中如何存储
function fn(a, b){
  a += 1;
  b += 1;
  console.log(a);
  console.log(b);
}
var x = 10;
var y = 20;
fn(x, y);
console.log(x);
console.log(y);
如上例，首先创建x和y变量的时候会分别在内存中开辟一个空间，当执行fn函数的时候，会再开辟两个局部变量空间给a和b，并将x和y的值赋过来，
所以，函数fn对a，b的改变不会影响x和y的值。

2.复杂数据类型（数组、对象）
（1）创建一个对象的时候（只有只用new才会开辟空间，见下面的例子），会在堆上开辟一个空间，存储该对象的属性、方法，同时还会在栈上开辟一个空间，存储该对象在堆上的地址，这样以后通过栈对应的变量访问对象。
所以访问对象类型变量的时候需要先访问该变量在栈上对应的地址，再通过这个地址在堆上找到对应的对象。比如：
function Person(name, age){
  this.name = name;
  this.age = age;
}
var p1 = new Persong(小猪精1号, 18);
var p2 = p1;
上面的例子中，只会在创建p1的时候在堆和栈上开辟空间。而在创建p2的时候，不会在堆上开辟空间，只会在栈上开辟一个空间，把p1存储的地址赋值给p2，这个地址指向的
还是之前p1创建的对象，所以当p1对象的属性值改变时，p2对应对象的属性值也会改变（因为指向的都是一个对象嘛）。
（2）复杂类型作为函数的参数，在内存中如何存储
function Person(name, age){
  this.name = name;
  this.age = age;
}
var p1 = new Persong(小猪精1号, 18);
function fn(person){
  person.name = '小猪精2号';
}
fn(p1);
如上例，在创建p1对象的时候，会在堆和栈上开辟空间，在执行fn函数的时候，在栈上新创建了一个局部变量，变量值存储了p1对象在堆中的地址，所以改变这个
局部变量对应对象的属性值，p1的属性值也会变化。
