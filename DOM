一.获取页面元素
1.根据id获取元素（getElementById）
使用方法如下，返回对象类型，如果页面上没有对应的id，则返回null
var main = document.getElementById('main');

2.根据标签名字获取元素（getElementsByTagName）
返回一个集合，有length属性，可以遍历，如果页面上没有对应标签，则返回一个长度为0的集合
var divs = document.getElementsByTagName('div');
注意：这个方法获取到的集合是动态集合，即当页面增减了对应的标签，获取的标签数量也会变化。
要获取id为father下的所有子元素的div标签：
var father = document.getElementById('father');
var divs = father.getElementsByTagName('div');

3.根据标签的name属性获取元素（getElementsByName）（因为存在浏览器兼容问题，所以不推荐使用）

4.根据标签的class属性获取元素（getElementsByClassName）（也存在浏览器兼容问题，IE9以上才支持）

5.根据选择器获取元素（IE8以后的浏览器才支持）
（1）querySelector（只会返回符合条件的第一个元素）
var myclass = document.querySelector('.myclass');
var myid = document.querySelector('#myid');
（2）querySelectorAll（返回符合条件的所有元素）

二.属性操作
1.获取元素属性
使用'.'即可获取元素的属性，属性名和标签的属性名一致，比如我要修改一张图片的src属性：
var pic = document.getElementById('pic');
pic.src = '...';
但是也有属性名和标签不一致的情况：
（1）获取元素的class属性要使用className（因为class在js里面是关键字，所以不能作为元素的属性），比如如下的例子：
<head>
	<meta charset="UTF-8">
	<title>Document</title>
	<style type="text/css">
		.show{
			display: block;
		}
		.hidden{
			display: none;
		}
		#box{
			background-color: red;
			width: 100px;
			height: 100px;
		}
	</style>
</head>
<body>
	<input type="button" name="btn" value="隐藏" id="btn">
	<div id="box" class="show"></div>
	<script type="text/javascript">
    var btn = document.getElementById('btn');
		var isShow = true;
		btn.onclick = function(){
			var box = document.getElementById('box');
			if(isShow){
				box.className = 'hidden';
				btn.value = '显示';
				isShow = false;
			}else{
				box.className = 'show';
				btn.value = '隐藏';
				isShow = true;
			}
		}
  </script>
</body>

2.取消a标签的默认跳转行为
在a标签的点击事件里面return false即可。
var link = getElementById('link');
link.onclick = function(){
	return false;
}

3.获取和设置标签内的内容
比如我想获取<p>累啊累啊</p> p标签中的内容，要使用innerHTML或者innerText属性。
（1）innerHTML
innerHTML获取内容的时候，如果内容中有标签，会把标签也获取到，包括内容的换行和空白也会获取到。
使用innerHTML设置标签内容的时候，如果内容中带标签，会以HTML的方式解析。
比如
<div>
	我是一个div
	<p>我是个p</p>
</div>
获取div中的内容如下：
我是一个div
<p>我是个p</p>

（2）innerText（有兼容性问题，和textContent替换使用。谷歌、新版火狐和新版IE浏览器两个都支持，旧版火狐只支持textContent，旧版IE只支持innerText）
innerText获取内容的时候，如果内容中有标签，会把标签过滤掉，会把前后换行和空白都过滤掉。
使用innerText设置标签内容的时候，如果内容中带标签，会直接把标签显示出来。
比如
<div>
	我是一个div
	<p>我是个p</p>
</div>
获取div中的内容如下：
我是一个div 我是个p

innerText兼容性问题处理方法：
function getInnerText(element) {
	if(type of element.innerText === 'string'){
		return element.innerText;
	}else{
		return element.textContent;
	}
}

4.表单元素特有属性
value
type
disabled  禁用属性
checked  复选框选中属性
selected  下拉菜单选中属性

上面的最后三个属性由于html中只有一个值，所以DOM对应的元素属性值是bool类型，要使用true或者false来设置他们的属性值

5.自定义属性
举个例子就明白了：
<div id="person" age="18" personId="1">张三</div>
这里的age和personId就是自定义属性
注意：自定义属性不能直接使用'.'来获取
（1）获取自定义属性值的方法：
person.getAttribute('age');

（2）设置自定义属性值
person.setAttribute('sex', 'male');

（3）移除自定义属性
person.removeAttribute('sex');

三.事件
注册事件的三种方式：

1.使用on+事件名的方法
（1）点击事件
var btn = document.getElementById('btn');
btn.onclick = functon(){
  alert('hehe');
}

（2）获得、失去焦点事件
①获得焦点
onfocus
②失去焦点
onblur

（3）鼠标移入移出事件
①鼠标移入
onmouseover
②鼠标移出
onmouseout

（4）鼠标移动事件
onmousemove

2.addEventListener()方法（有浏览器兼容问题，IE9以上才支持，IE9以下要使用attachEvent方法）
addEventListener()方法将指定的监听器注册到 EventTarget 上，当该对象触发指定的事件时，指定的回调函数就会被执行。 事件目标可以是一个文档上的元素
Element,Document和Window或者任何其他支持事件的对象 (比如 XMLHttpRequest)。
这个方法的好处是可以给相同元素重复注册相同的事件而且不会互相覆盖（ele.onclick=...是会覆盖的）
这个方法有三个参数：
参数1：填写表示事件类型的字符串（事件名称）
参数2：事件处理函数
参数3：可选参数，bool类型，默认为false。当设置为false的时候，会以事件冒泡（从内到外）的顺序触发，当设置为true的时候，
事件触发顺序是从外到内（事件捕获）
eg. var btn = document.getElementById('btn');
btn.addEventListener('click', function(){
	alert('hello world');
});


3.attachEvent()方法（IE老版本特有方法，IE6-IE10支持）
两个参数：
参数1：on+事件名
参数2：事件处理函数
eg. var btn = document.getElementById('btn');
btn.attachEvent('onclick', function(){
	alert('hello world');
});

4.处理注册事件的兼容性问题
		function addEventListener(ele, eventName, fn){
			if(ele.addEventListener){
				ele.addEventListener(eventName, fn);
			}else if(ele.attachEvent){
				ele.attachEvent('on' + eventName, fn);
			}else{
				ele['on' + eventName] = fn;
			}
		}

5.事件触发的三个阶段
（1）阶段一：捕获阶段
（2）阶段二：执行阶段
（3）阶段三：冒泡阶段

6.事件冒泡
事件冒泡的原理：当一个元素接收到事件的时候 会把他接收到的事件传给自己的父级，一直到window 。
（注意这里传递的仅仅是事件 并不传递所绑定的事件函数。所以如果父级没有绑定事件函数，就算传递了事件 也不会有什么表现 但事件确实传递了。）
事件冒泡的作用：事件委托，即如果一个父元素有很多个子元素，如果遍历每一个子元素给它注册事件的话会比较耗性能，可以通过事件委托的方法：只给父元素
注册事件，这样子元素触发事件的时候就会调用父元素注册的事件，在父元素的注册事件里面获取到触发事件的子元素即可，举例如下：
<ul id="ul">
	<li>张三</li>
	<li>李四</li>
	<li>王五</li>
	<li>赵六</li>
</ul>
<script>
	var ul = document.getElementById('ul');
	ul.onclick = function(e){//e是事件参数，携带了事件发生时的相关数据
		e.target.style.backgroundColor = 'red';//e.target可以获取到被点击的元素对象
	}
</script>

7.事件对象
通过给事件处理函数添加一个参数即可获取事件对象，比如：
ul.onclick = function(e){}         //e有浏览器兼容问题，在老版本的IE中使用window.event获取事件对象
处理兼容性问题：
ul.onclick = function(e) {
	e = e || window.event;
}
（1）事件对象的属性
e.eventPhase            获取事件的阶段
e.target                获取真正触发事件的对象（有浏览器兼容问题，在老版本IE中使用e.srcElement）
e.currentTarget         事件处理函数所处的对象（相当于this）
e.type                  获取事件名称
e.clientX               鼠标相对于浏览器可视区域的X坐标
e.clientY               鼠标相对于浏览器可视区域的Y坐标
e.pageX                 鼠标相对于当前页面的X坐标
e.pageY                 鼠标相对于当前页面的Y坐标

（2）事件对象的方法


四.样式操作
使用style.xxx来设置元素的样式。比如：
var box = document.getElementById('box');
box.style.width = '100px';
box.style.height = '100px';
box.style.backgroundColor = 'red';
注意：
（1）使用style方式设置的样式显示在标签行内
（2）通过样式属性设置宽高、位置的属性类型是字符串，需要加上px
（3）如果要直接改变body的style属性，则前面还要写document：
document.body.style.backgroundcolor = 'black';

五.节点
1.节点类型
元素节点（nodeType = 1）、属性节点、文本节点、注释节点

2.父子节点
（1）父节点（只有一个）
parentNode

（2）子节点（返回一个NodeList类型的数据）
childNodes
这个方法使用的时候要注意是获取的所有子元素节点（包括元素、属性、文本和注释），比如下例：
<div id="box">
	<span>span</span>
	<p>p</p>
	<!-- 注释 -->
</div>
<script>
	var box = document.getElementById('box');
	console.log(box.childNodes);
</script>
最后会打印出来7个子节点，分别为：span前的空文本节点、span节点、span后的空文本节点、p节点、p后的空文本节点、注释节点、注释后的空文本节点

（3）子元素节点（只读属性）（有兼容性问题，IE6-8可能会错误的包含注释节点）
可以使用children属性获取元素的所有子元素节点
box.children;

3.第一个和最后一个子节点
（1）获取第一个子节点（包括元素、属性、文本和注释）
firstchild

（2）获取最后一个子节点（包括元素、属性、文本和注释）
lastchild

4.第一个和最后一个子元素（只读）（兼容性问题：IE9以上才支持）
（1）获取第一个子元素
firstElementChild

（2）获取最后一个子元素
lastElementChild

5.兄弟节点
（1）下一个兄弟节点（包括元素、属性、文本和注释）
nextSibling

（2）上一个兄弟节点（包括元素、属性、文本和注释）
previousSibling

6.兄弟元素（只读，有兼容性问题，IE9以上才支持）
（1）下一个兄弟元素
nextElementSibling

（2）上一个兄弟元素
previousElementSibling

六.动态创建元素的方法
1.document.write()（很少使用）
document.write('<p>hello world</p>');
但是这个方法有一个局限性，只能在页面加载的时候使用，如果在事件（比如点击事件）中使用，会覆盖页面原本的内容
2.element.innerHTML（创建简单元素并且不需要事件的时候推荐使用innerHTML）
var box = document.getElementById('box');
box.innerHTML = '<p>hello world</p>';
这个方法在事件中使用时不会覆盖页面原本的内容。但是这个方法在使用的时候可能会产生效率问题，因为innerHTML每次更改dom结构都需要重新绘制，所以要
避免在循环中使用innerHTML

3.document.createElement()（推荐）
var p = document.createElement('p');   //创建p标签，只是在内存中创建了对象，还没有放到DOM结构中，放入DOM结构要使用appendChild()方法

4.appendChild()
比如我想把p标签放到id为box的div里面：
var box = document.getElementById('box');
box.appendChild(p);                   //把p标签放到id为box的div里面

注意：
（1）如果被插入的节点已经存在于当前文档的文档树中,则那个节点会首先从原先的位置移除,然后再插入到新的位置.
（2）与appendChild()相反的是删除元素：removeChild()

4.insertBefore()
把元素插入到页面的指定位置
<ul id="ul">
	<li>111</li>
	<li>222</li>
	<li>333</li>
</ul>
比如我想把一个li插入到ul下所有li的最前面，这时候就不能使用ul.append(li)了，因为这个方法会把li插入到最后面，要使用insertBefore()方法：
var ul = document.getElementById('ul');
var li = document.createElement('li');
ul.insertBefore(li, ul.children[0]);     //第一个参数填写要插入的元素，第二个参数填写把这个元素插入到哪个元素之前


5.replaceChild()    //第一个参数为新的节点，第二个参数为旧的节点
用指定的节点替换当前节点的一个子节点，并返回被替换的节点。
