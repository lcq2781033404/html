一.获取页面元素
1.根据id获取元素（getElementById）
使用方法如下，返回对象类型，如果页面上没有对应的id，则返回null
var main = document.getElementById('main');

2.根据标签名字获取元素（getElementsByTagName）
返回一个集合，有length属性，可以遍历，如果页面上没有对应标签，则返回一个长度为0的集合
var divs = document.getElementsByTagName('div');
注意：这个方法获取到的集合是动态集合，即当页面增减了对应的标签，获取的标签数量也会变化。
要获取id为father下的所有子元素的div标签：
var father = document.getElementById('father');
var divs = father.getElementsByTagName('div');

3.根据标签的name属性获取元素（getElementsByName）（因为存在浏览器兼容问题，所以不推荐使用）

4.根据标签的class属性获取元素（getElementsByClassName）（也存在浏览器兼容问题，IE9以上才支持）

5.根据选择器获取元素（IE8以后的浏览器才支持）
（1）querySelector（只会返回符合条件的第一个元素）
var myclass = document.querySelector('.myclass');
var myid = document.querySelector('#myid');
（2）querySelectorAll（返回符合条件的所有元素）

二.属性操作
1.获取元素属性
使用'.'即可获取元素的属性，属性名和标签的属性名一致，比如我要修改一张图片的src属性：
var pic = document.getElementById('pic');
pic.src = '...';
但是也有属性名和标签不一致的情况：
（1）获取元素的class属性要使用className（因为class在js里面是关键字，所以不能作为元素的属性），比如如下的例子：
<head>
	<meta charset="UTF-8">
	<title>Document</title>
	<style type="text/css">
		.show{
			display: block;
		}
		.hidden{
			display: none;
		}
		#box{
			background-color: red;
			width: 100px;
			height: 100px;
		}
	</style>
</head>
<body>
	<input type="button" name="btn" value="隐藏" id="btn">
	<div id="box" class="show"></div>
	<script type="text/javascript">
    var btn = document.getElementById('btn');
		var isShow = true;
		btn.onclick = function(){
			var box = document.getElementById('box');
			if(isShow){
				box.className = 'hidden';
				btn.value = '显示';
				isShow = false;
			}else{
				box.className = 'show';
				btn.value = '隐藏';
				isShow = true;
			}
		}
  </script>
</body>

2.取消a标签的默认跳转行为
在a标签的点击事件里面return false即可。
var link = getElementById('link');
link.onclick = function(){
	return false;
}

3.获取和设置标签内的内容
比如我想获取<p>累啊累啊</p> p标签中的内容，要使用innerHTML或者innerText属性。
（1）innerHTML
innerHTML获取内容的时候，如果内容中有标签，会把标签也获取到，包括内容的换行和空白也会获取到。
使用innerHTML设置标签内容的时候，如果内容中带标签，会以HTML的方式解析。
比如
<div>
	我是一个div
	<p>我是个p</p>
</div>
获取div中的内容如下：
我是一个div
<p>我是个p</p>

（2）innerText（有兼容性问题，和textContent替换使用。谷歌、新版火狐和新版IE浏览器两个都支持，旧版火狐只支持textContent，旧版IE只支持innerText）
innerText获取内容的时候，如果内容中有标签，会把标签过滤掉，会把前后换行和空白都过滤掉。
使用innerText设置标签内容的时候，如果内容中带标签，会直接把标签显示出来。
比如
<div>
	我是一个div
	<p>我是个p</p>
</div>
获取div中的内容如下：
我是一个div 我是个p

innerText兼容性问题处理方法：
function getInnerText(element) {
	if(type of element.innerText === 'string'){
		return element.innerText;
	}else{
		return element.textContent;
	}
}

4.表单元素特有属性
value
type
disabled  禁用属性
checked  复选框选中属性
selected  下拉菜单选中属性

上面的最后三个属性由于html中只有一个值，所以DOM对应的元素属性值是bool类型，要使用true或者false来设置他们的属性值

5.自定义属性
举个例子就明白了：
<div id="person" age="18" personId="1">张三</div>
这里的age和personId就是自定义属性
注意：自定义属性不能直接使用'.'来获取
（1）获取自定义属性值的方法：
person.getAttribute('age');

（2）设置自定义属性值
person.setAttribute('sex', 'male');

（3）移除自定义属性
person.removeAttribute('sex');

三.事件
1.点击事件
var btn = document.getElementById('btn');
btn.onclick = functon(){
  alert('hehe');
}

2.获得、失去焦点事件
（1）获得焦点
onfocus
（2）失去焦点
onblur

3.鼠标移入移出事件
（1）鼠标移入
onmouseover
（2）鼠标移出
onmouseout

四.样式操作
使用style.xxx来设置元素的样式。比如：
var box = document.getElementById('box');
box.style.width = '100px';
box.style.height = '100px';
box.style.backgroundColor = 'red';
注意：
（1）使用style方式设置的样式显示在标签行内
（2）通过样式属性设置宽高、位置的属性类型是字符串，需要加上px
（3）如果要直接改变body的style属性，则前面还要写document：
document.body.style.backgroundcolor = 'black';

五.节点
1.节点类型
元素节点（nodeType = 1）、属性节点、文本节点、注释节点

2.父子节点
（1）父节点（只有一个）
parentNode

（2）子节点（返回一个NodeList类型的数据）
childNodes
这个方法使用的时候要注意是获取的所有子元素节点（包括元素、属性、文本和注释），比如下例：
<div id="box">
	<span>span</span>
	<p>p</p>
	<!-- 注释 -->
</div>
<script>
	var box = document.getElementById('box');
	console.log(box.childNodes);
</script>
最后会打印出来7个子节点，分别为：span前的空文本节点、span节点、span后的空文本节点、p节点、p后的空文本节点、注释节点、注释后的空文本节点

（3）子元素节点（只读属性）（有兼容性问题，IE6-8可能会错误的包含注释节点）
可以使用children属性获取元素的所有子元素节点
box.children;

3.第一个和最后一个子节点
（1）获取第一个子节点（包括元素、属性、文本和注释）
firstchild

（2）获取最后一个子节点（包括元素、属性、文本和注释）
lastchild

4.第一个和最后一个子元素（只读）（兼容性问题：IE9以上才支持）
（1）获取第一个子元素
firstElementChild

（2）获取最后一个子元素
lastElementChild

5.兄弟节点
（1）下一个兄弟节点（包括元素、属性、文本和注释）
nextSibling

（2）上一个兄弟节点（包括元素、属性、文本和注释）
previousSibling

6.兄弟元素（只读，有兼容性问题，IE9以上才支持）
（1）下一个兄弟元素
nextElementSibling

（2）上一个兄弟元素
previousElementSibling

六.动态创建元素的方法
1.document.write()（很少使用）
document.write('<p>hello world</p>');
但是这个方法有一个局限性，只能在页面加载的时候使用，如果在事件（比如点击事件）中使用，会覆盖页面原本的内容
2.element.innerHTML
var box = document.getElementById('box');
box.innerHTML = '<p>hello world</p>';
这个方法在事件中使用时不会覆盖页面原本的内容。但是这个方法在使用的时候可能会产生效率问题，因为innerHTML每次更改dom结构都需要重新绘制，所以要
避免在循环中使用innerHTML

3.document.createElement()（推荐）
var p = document.createElement('p');   //创建p标签，只是在内存中创建了对象，还没有放到DOM结构中
比如我想把p标签放到id为box的div里面：
var box = document.getElementById('box');
box.appendChild(p);                   //把p标签放到id为box的div里面
