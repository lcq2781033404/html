一.网页布局方式
1.固定宽度布局：为网页设置一个固定的宽度，通常以px作为长度单位，常见于pc端网页。
2.流式布局：为网页设置一个相对的宽度，通常以百分比作为长度单位。
3.栅格化布局：将网页宽度人为的划分成均等的长度，然后排版布局时则以这些均等的长度作为度量单位，通常利用百分比作为长度单位来划分成均等的长度。
4.响应式布局：通过检测设备信息，决定网页布局方式。即用户如果采用不同的设备访问同一个网页，有可能会看到不一样的内容，一般情况下是检测设备屏幕的宽度来实现。
注意：以上几种布局方式并不是独立存在的，实际开发过程中往往是相互结合使用。

二.响应式布局
优点：只需要做一个页面来适配不同的设备，降低开发量
缺点：在移动端很多不需要显示的内容也会像服务器发送请求，不需要显示的资源也会加载，造成代码冗余，浪费流量。
响应式开发原理：媒体查询

三.媒体查询
1.媒体查询是来设置不同屏幕宽度下的样式。语法如下：
        /*w:768~992 green  max-width: 768px  屏幕的宽度小于768px*/
        @media screen and (max-width: 768px){
            body{
                background-color: green;
            }
        }
        /*w:992!1200 blue  max-width: 992px:当屏幕的宽度小于992的时候*/
        @media screen and (max-width: 992px){
            body{
                background-color: blue;
            }
        }
        /*w>1200 pink  max-width: 1200px  屏幕的宽度小于1200*/
        @media screen and (max-width: 1200px){
            body{
                background-color: pink;
            }
        }

书写建议：
（1）.如果是判断最小值 (min-width)，那么就应该从小到大写--bootstrap就是判断最小值，从小到大写
（2）.如果是判断最大值 (max-width)，那么就应该从大到小写

2.媒体查询不但能根据屏幕宽度修改样式，还能根据屏幕宽度引入不同的css样式文件：
<link rel="stylesheet" media="screen and (min-width:992px) and (max-width:1200px)" href="b.css">
上面的代码，在宽度为992~1200之间时，使用b.css的样式

3.min-width和min-device-width的区别
min-width指的是可视区域的宽度
min-device-width指的是设备的宽度
推荐使用min-width，这样在pc端拖拽改变浏览器宽度也能进行媒体查询。

四.常见的响应式框架
1.bootstrap

2.Amaze UI

3.Framework 7（针对IOS）
