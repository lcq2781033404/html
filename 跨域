一.同源策略
（1）同源策略是浏览器的一种安全策略，所谓同源指的是请求URL地址中的协议、域名和端口都与当前网页相同，只要其中之一不同就是跨域。
（2）同源策略主要是为了保证浏览器的安全性。
（3）在同源策略下，浏览器不允许Ajax跨域获取服务器数据。

但是，在实际工作中，跨域获取数据的需求十分常见，所以需要跨域的解决方案。

二.跨域解决方案
1.jsonp（主流的跨域解决方案）
（1）jsonp的原理（通过script标签的src属性进行跨域请求）
动态创建script标签，然后通过它的src属性发送跨域请求，然后服务器端响应的数据格式为【函数调用（foo(实参)）】，所以在发送请求之前必须先声明一个函数，
并且函数的名字与参数中传递的名字要一致。这里声明的函数是由服务器响应的内容（实际就是一段js代码-函数调用）来调用

（2）实现
使用script标签的src属性可以跨域访问其他页面，使用js代码动态的创建script标签，在其src的属性值的页面中返回一个js函数，函数的参数就是服务器要传给
客户端的数据（服务器响应的内容为函数调用）。
<script>
  var script = document.createElement('script');
  script.src = 'tom.com/data.php';
  var head = document.getElementsByTagName('head')[0];
  head.appendChild(script);
  function foo(data){
    console.log(data.username, data.password);
  }
</script>

tom.com/data.php页面代码：
<?php 
  $arr = array("username"=>"zs", "password"=>"123");
  echo 'foo('.json_encode($arr).')';     //这里php输出了一段js的函数调用！！！！！
?>

但是这样前端和后端就必须保持两边的foo函数名字一致，但是其实后端是根本就不关心这个函数叫什么的，有没有什么方法可以前端自定义这个foo函数的名字呢，方法如下：
<script>
  var script = document.createElement('script');
  script.src = 'tom.com/data.php?callback=cb';
  var head = document.getElementsByTagName('head')[0];
  head.appendChild(script);
  function cb(data){
    console.log(data.username, data.password);
  }
</script>

<?php 
  $arr = array("username"=>"zs", "password"=>"123");
  $cb = $_GET['callback'];
  echo $cb.'('.json_encode($arr).')';     //这里php输出了一段js的函数调用！！！！！
?>

三.jQuery框架实现跨域
jQuery实现跨域依旧使用$.ajax()方法，格式也和之前的ajax异步请求相似，但是这里实现的是跨域传递数据功能，与之前的ajax在实现原理上面存在区别。
        $(function(){
            $("#btn").click(function(){
                $.ajax({
                    type:'get',          //跨域通过url地址传参，这里的请求方式只能填写get
                    url:'http://tom.com/jsonp.php',
                    dataType:'jsonp',              //这里的类型一定要写jsonp
                    data:{},
                    success:function(data){
                        console.log(data.username,data.password);
                    },
                    error:function(data){
                        console.dir(data);
                        console.log('error');
                    }
                });
            });
        });


http://tom.com/jsonp.php页面代码：
//根据跨域的实现原理，后端依旧需要返回一个js的函数调用
<?php
  $cb = $_GET['callback'];
  $arr = array("username"=>"zs", "password"=>"123");
  echo $cb.'('.json_encode($arr).')';                //这里php输出了一段js的函数调用！！！！！
?>

虽然前端没有声明callback函数，但是jQuery帮我们自动封装了一个，所以这么写也能完成跨域获取数据的请求，但是这样有一个局限就是后端必须通过
$_GET['callback']获取函数名字，如果把callback换成其他的名字或者不写，就会报错。
如果前端想要自己定义参数的名字，只需要在$.ajax()方法中写一个jsonp属性即可：
        $(function(){
            $("#btn").click(function(){
                $.ajax({
                    type:'get',
                    url:'http://tom.com/jsonp.php',
                    dataType:'jsonp',
                    jsonp:'cb',//jsonp属性的作用就是自定义参数名字（callback=abc 这里的名字指的是等号前面的键，后端根据这个键获取方法名，
                                 jquery的默认参数名称是callback）
                    jsonpCallback:'abc',//这个属性的作用就是自定义回调函数的名字（callback=abc ，这里的名字指的是等号后面的值）
                    data:{},
                    success:function(data){
                        console.log(data.username,data.password);
                    },
                    error:function(data){
                        console.dir(data);
                        console.log('error');
                    }
                });
            });
        });
        
http://tom.com/jsonp.php页面代码：   
<?php
  $cb = $_GET['cb'];
  $arr = array("username"=>"zs", "password"=>"123");
  echo $cb.'('.json_encode($arr).')';                //这里php输出了一段js的函数调用！！！！！
?>


四.模仿jQuery封装jsonp
function ajax(obj){
    // jsonp仅仅支持get请求
    var defaults = {
        url : '#',
        dataType : 'jsonp',
        jsonp : 'callback',
        data : {},
        success:function(data){console.log(data);}
    }

    for(var key in obj){
        defaults[key] = obj[key];
    }
    // 这里是默认的回调函数名称
    // expando: "jQuery" + ( version + Math.random() ).replace( /\D/g, "" ),
    var cbName = 'jQuery' + ('1.11.1' + Math.random()).replace(/\D/g,"") + '_' + (new Date().getTime());
    if(defaults.jsonpCallback){
        cbName = defaults.jsonpCallback;
    }

    // 这里就是回调函数，调用方式：服务器响应内容来调用
    // 向window对象中添加了一个方法，方法名称是变量cbName的值
    window[cbName] = function(data){
        defaults.success(data);//这里success的data是实参
    }

    var param = '';
    for(var attr in defaults.data){
        param += attr + '=' + defaults.data[attr] + '&';
    }
    if(param){
        param = param.substring(0,param.length-1);
        param = '&' + param;
    }
    var script = document.createElement('script');
    script.src = defaults.url + '?' + defaults.jsonp + '=' + cbName + param;
    var head = document.getElementsByTagName('head')[0];
    head.appendChild(script);

    // abc({"username":"zhangsan","password":"123"})
}
