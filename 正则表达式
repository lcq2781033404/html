一.概念（正则表达式可以方便我们搜索一些指定模式的内容。）
正则表达式通常用来检索、替换符合某个模式的文本。

二.作用
匹配、提取、替换我们想要查找的字符串。（常用于做一些表单的验证）

三.基本语法

1.元字符（一个元字符只能匹配到一个字符）
常用元字符
\d     匹配数字
\D     匹配任意非数字的字符
\w     匹配字母或数字或下划线
\W     匹配所有非字母、数字、下划线的字符
\s     匹配空格和换行
\S     匹配非空格和换行
.      匹配除了换行的任意单个字符
^      匹配以...开头的字符（^放到匹配规则的开头）
$      匹配以...结尾的字符（$放到匹配规则的结尾）

比如我要找以前两个字符是ab，第三个字符是数字的，则书写如下：ab\d

2.限定符（可以匹配到多个字符）
常用限定符
*     修饰*前面的一个字符出现零次、一次或多次
+     修饰+前面的一个字符出现一次或多次
?     修饰?前面的一个字符出现零次或一次
{n}   修饰{n}前面的一个字符出现n次（比如找出现六个数字的字符：\d{6}）
{m,n} 修饰{m,n}前面的一个字符至少出现m次，最多出现n次（比如要求输入3-8位的数字：\d{3,8}）

3.其他特殊字符
[]    匹配一个[]内出现的任意字符
[^]   []内写了^表示匹配非[]内的任意字符
\     转义符
|     或者

四.练习
1.邮政编码（一共有六位数字，且第一个数字不能为0）
^[1-9]\d{5}$

2.验证手机号（11位数字，第一个不是0）
^[1-9]\d{10}$


五.正则对象（内置对象）
创建正则对象的方法

1.new RegExp()方法
var regularExpression = new RegExp();
RegExp()这个构造函数里面可以填写两个参数：
参数1：模式（即正则表达式）
参数2：标识（常用的标识有两个，i（忽略大小写）和g（全局匹配））（可省略）

var regularExpression = new RegExp('ab\d');
var str = 'xyz';
regularExpression.test(str);     //正则对象有一个test方法，括号内填写要匹配的字符串，返回true或者false

2.var regularExpression = /ab\d/;    //直接将正则表达式填写在//中间，i和g这两个参数在//后面写即可


六.表单验证练习





