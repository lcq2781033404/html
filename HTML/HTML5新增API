HTML5 API存在兼容性问题，IE9以上的浏览器才支持（部分高版本浏览器也存在兼容性问题）。
一.检测网络连接状态
以前，我们使用window.navigator.online来检测网络是否可用。这个属性返回一个bool类型的值，联网状态返回true，断网状态返回false。
但是上面的方法在不同的浏览器中会存在很多的差异所以我们可以用HTML5的新事件online和offline。他们监听的对象都是window。见下例：
window.addEventListener('online', function(){
  alert('当前网络可用');
});
window.addEventListener('offline', function(){
  alert('当前网络不可用');
});

二.全屏显示
这个方法高版本浏览器也存在兼容性问题，不同浏览器需要添加不同的前缀（webkit、moz、o、ms（msRequestFullscreen，这里s要小写，其他内核的s大写））。
1.添加全屏显示
DOM.requestFullScreen();
btn.onclick = function(){
  img.requestFullScreen();
}
兼容性处理
btn.onclick = function(){
  if(img.requestFullScreen){
    img.requestFullScreen();
  }else if(img.webkitRequestFullScreen){
    img.webkitRequestFullScreen();
  }else if(){
    ...
  }
}

2.取消全屏显示（取消全屏显示由document调用），不同浏览器需要添加不同的前缀（webkit、moz、o、ms）。
document.cancelFullScreen();

3.全屏显示伪类选择器
div:full-screen{
  ...
}
:full-screen伪类选择器规定元素在全屏状态下的样式，有兼容性问题，要搭配浏览器前缀食用。

三.Web本地存储
1.特性
（1）设置、读取方便，页面刷新不丢失数据
（2）容量大，sessionStorage约5M，localStorage约20M.
（3）只能存储字符串，可以将对象JSON.stringify()编码后存储 

2.window.sessionStorage
生命周期为关闭浏览器窗口
在同一窗口下数据可以共享

3.window.localStorage
永久生效，除非手动删除（服务器方式访问然后清除缓存）
可以多窗口共享

4.方法详解
（1）setItem(key, value)   设置存储内容
val = document.getElementById('username').value;
window.sessionStorage.setItem('name', val);

（2）getItem(key)          读取存储内容
console.log(window.sessionStorage.getItem('name'));

（3）removeItem(key)       删除键值为key的存储内容
window.sessionStorage.removeItem('name');

（4）clear()               清空所有存储内容
window.sessionStorage.clear();


四.文件读取
html5提供的文件读取api可以把上传的文件内容或者图片的缩略图显示在页面上。
通过FileReader对象可以读取本地存储的文件，使用File对象来指定所要读取的文件或数据。其中，File对象可以是来自用户在一个元素上选择文件后返回的FileList
对象，也可以来自由拖放操作生成的dataTransfer。
<input type="file" id="inpu" />
<div id="dv"></div>
<script>
  var inpu = document.getElementById("inpu");
  var dv = document.getElementById("dv");
  inpu.addEventListener('change', function(){
   console.log(this.files);                 //files是上传文件的集合，存储了每个文件的基本信息
   //读取文件
   var reader = new FileReader();           //创建一个文件读取实例，FileReader是H5新增内置对象，可以读取文件内容
   reader.readAsText(this.files[0]);        //读取文件列表中第一个文件的文字内容，读取完毕后，会把内容存放到reader的result属性里面
   reader.onload = function () {            //当文件读取完毕后，会调用onload方法
    console.log(this.result);               //打印读取的内容
    dv.innerHTML = this.result;
   }
  });
</script>
上面的例子可以把文本格式的文件内容读取并显示在页面上，如果想要读取图片并在页面显示缩略图，方法也是类似的：
<input type="file" id="inpu" />
<img src="" id="img" />
<script>
  var inpu = document.getElementById("inpu");
  var dv = document.getElementById("dv");
  inpu.addEventListener('change', function(){
   console.log(this.files);                 //files是上传文件的集合，存储了每个文件的基本信息
   //读取文件
   var reader = new FileReader();           //创建一个文件读取实例，FileReader是H5新增内置对象，可以读取文件内容
   reader.readAsDataURL(this.files[0]);        //读取文件列表中第一个文件的文字内容，读取完毕后，会把内容存放到reader的result属性里面
   reader.onload = function () {            //当文件读取完毕后，会调用onload方法
    console.log(this.result);               //打印读取的内容
    img.src = this.result;
   }
  });
</script>

五.地理定位
在H5中，增加了获取用户地理信息的API，这样使我们可以基于用户位置开发互联网应用，即基于位置服务。
<body>
	<p id="demo">点击这个按钮，获得您的坐标：</p>
	<button onclick="getLocation()">试一下</button>
	<script>
		var x=document.getElementById("demo");

		function getLocation()   // 当我们点击了按钮就会触发这个函数
		  {
		  if (navigator.geolocation)  // 判断我们当前的设备是否支持 地理定位 
		    {

		    	// 如果支持 就 获得当前的 地理位置  调用  getCurrentPosition 方法
		    navigator.geolocation.getCurrentPosition(showPosition,showError);
		       // showPosition  如果调用成功  调用这个函数 显示 当前位置
		       // showError   如果调用失败  调用这个函数 
		    }
		     
		  else{  // 如果设备不支持  就返回这句话  当前浏览器不支持 地理定位
		  	x.innerHTML="Geolocation is not supported by this browser.";}
		  }


		  	// 调用 成功的函数   返回当前位置的经纬度
		function showPosition(position)
		  {
		  x.innerHTML=  

		  "Latitude: " + position.coords.latitude +    //  获得当前的纬度

		  "<br />Longitude: " + position.coords.longitude;	 // 获得当前的经度
		  }
        // 调用 失败 的函数   返回当前位置的经纬度
		function showError(error)
		  {
		  switch(error.code) 
		    {
		    case error.PERMISSION_DENIED:
		      x.innerHTML="User denied the request for Geolocation."
		      // 用户无法定位的要求
		      break;
		    case error.POSITION_UNAVAILABLE:
		      x.innerHTML="Location information is unavailable."
		      // 位置信息不可用
		      break;
		    case error.TIMEOUT:
		      x.innerHTML="The request to get user location timed out."
		      // 获取用户位置的请求超时。
		      break;
		    case error.UNKNOWN_ERROR:
		      x.innerHTML="An unknown error occurred."
		      // 发生了一个不明错误
		      break;
		    }
		  }
	</script>
</body>

六.拖拽和释放
在h5中，拖放是标准的一部分，任何元素都能够拖放。
拖拽：Drag
释放：Drop
想要让元素可被拖放，需要为其设置draggable=true（链接和图片默认是可拖动的，不需要设置draggable属性）
拖拽API的相关事件：

被拖动的源对象可以触发的事件：
（1）ondragstart：源对象开始被拖动
（2）ondrag：源对象被拖动过程中（鼠标可能在移动也可能未移动）
（3）ondragend：源对象被拖动结束

拖动源对象进入目标对象可以触发的事件：
（1）ondragenter：目标对象被源对象拖动着进入
（2）ondragover：目标对象被源对象拖动着悬停在上方
（3）ondragleave：源对象拖动着离开了目标对象
（4）ondrop：源对象拖动着在目标对象上方释放（ondrop事件默认会被浏览器阻止，如果想要触发，需要在ondragover事件中阻止默认行为）

DataTransfer属性：
在进行拖放操作时，DataTransfer对象用来保存被拖动的数据。它可以保存一项或多项数据，一种或多种数据类型。

<body>
	<div id="div1">
		<p id="p1" draggable="true">拖拽内容1</p>
		<p id="p2" draggable="true">拖拽内容2</p>
		<p id="p3" draggable="true">拖拽内容3</p>
		<p id="p4" draggable="true">拖拽内容4</p>
	</div>
	<div id="div2"></div>
	<div id="div3"></div>
	<script>
	// 完整的拖拽   +  释放   
	// 1. 我们有很多盒子， 那个需要拖放 就 给这个盒子设置 可拖放效果
	// 2. 找到源文件 设置拖拽效果 
	// (1)ondragstart：源对象开始被拖动
		// var p = document.querySelector("#p1");
		//var obj = null;  用于存放我们拖放对象 源对象
		document.ondragstart = function(event) {
			console.log("源对象开始被拖动");
			// event.target  事件对象里面的事件目标
			console.log(event.target.id);
			 //obj = event.target;  把当前对象给 obj 然后追加到 新目标对象里面就阔以了
			 // event.dataTransfer.setData("类型", 数据) 在我们start 里面设置 当我们开始拖拽的时候，就存储数据
			 // 类型  text/html   URL  
			 // 记录 当前源对象的id 名字
			 event.dataTransfer.setData("text/html", event.target.id);  
			 // 我们传递的是 id  字符型形式  text

		}
	// (2)ondrag：源对象被拖动过程中(鼠标可能在移动也可能未移动)
		document.ondrag = function() {
			console.log("源对象被拖动过程中");
			// 不断的执行
		}

	// (3)ondragend：源对象被拖动结束
 		document.ondragend = function() {
			console.log("源对象被拖动结束");
		}
	
	// 3. 找到目标对象  设置 释放效果  onmouseenter   onmouseover 
	    // var target = document.querySelector("#div2");
   //  (1)ondragenter：目标对象被源对象拖动着进入
 		document.ondragenter = function(event) {
 			console.log("目标对象被源对象拖动着进入");
 			console.log(event.target);
 		}
	// (2)ondragover：目标对象被源对象拖动着悬停在上方
		document.ondragover = function(e) {
 			console.log("目标对象被源对象悬停在上方");
 			// 不断的执行
 			// 如果想要触发 ondrop 事件 则需要在over 里面 阻止  默认行为
 			return false;
 			// e.preventDefault()

 		}
	// (3)ondragleave：源对象拖动着离开了目标对象
		document.ondragleave = function() {
 			console.log("离开了");
 		}
	// (4)ondrop：源对象拖动着在目标对象上方释放/松手 
		document.ondrop = function(event) {
 			console.log("上方释放/松手");
 			// 当我们的源对象 在 目标对象上  释放   就可以吧 源对象放入目标对象里面了 追加
 			// 目标对象. appendChild(源对象)
 			// event.target.appendChild(obj);
 			// 拖拽的时候 ，不用删除原来的  
 			// 获取 dataTransfer里面的数据
 			var id = event.dataTransfer.getData("text/html");
 			// console.log(id);
 			event.target.appendChild(document.getElementById(id));
 			// 因为我们追加的 源对象  p  id 只是id名字， 需要 通过id 获取元素 追加到 目标对象里面
 			// 所以我们 document.getElementById(id)
 		}
	</script>
</body>
