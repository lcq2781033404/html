一.问题引入
出于种种原因，我们有时候需要得到函数内的局部变量。但是在javascript语言中，只有函数内部的子函数才可以读取局部变量。所以为了读取到函数内的局部变量，
我们便会在函数内部再定义一个子函数，闭包应运而生。

二.闭包的概念
各种专业文献上的“闭包”（closure）定义非常抽象，很难看懂。我的理解是，闭包就是能够读取其他函数内部变量的函数（在一个作用域中访问到另一个作用域的变量，
这种现象就是闭包），也可以把闭包简单理解成“定义在一个函数内部的函数”。所以，在本质上，闭包就是将函数内部和函数外部连接起来的一座桥梁。

三.闭包原理
先看一个例子：
function Foo() {
    var i = 0;
    return function() {
        console.log(i++);
    }
}
 
var f1 = Foo(),
      f2 = Foo();
f1();//0
f1();//1
f2();//0

一个函数在开始执行的时候，会给其中定义的变量划分内存空间保存，以备后面的语句所用，等到函数执行完毕返回后，这些变量就被认为是无用的了，对应的内存
空间也就被回收了，下次再执行此函数的时候,所有的变量又回到最初的状态，重新赋值使用。但是当一个函数内部嵌套了一个函数，同时内部的函数使用了外部函数
的变量，并且内部的函数可能在外部被调用到的时候，js解释器会自动把函数和他可能使用的变量（包括本地变量和父级和祖先级函数的变量（自由变量））一起保存
起来，也就是构建一个闭包。这些变量将不会被内存回收器所回收，只有当内部的函数不可能被调用以后（例如被删除了，或者没有了指针），才会销毁这个闭包，而
没有任何一个闭包引用的变量才会被下一次内存回收启动时所回收。还是看刚才的例子：首先返回的function函数赋值给全局变量f1，因此function函数就被储存在
了内存中，因为Foo函数是function函数的父函数，于是Foo函数和局部变量i也被存在了内存，所以Foo函数不会在调用结束后，被内存回收机制回收。

四.闭包案例（闭包延展了函数的作用域）
1.要求点击每一个li的时候都能获取到它对应的索引
<ul id = "heros">
<li>关羽</li>
<li>张飞</li>
<li>刘备</li>
</ul>

<script>
    var heros = document.getElementById('heros');
    var list = heros.children;
    for(var i = 0; i < list.length; i++) {
        var li = list[i];
        li.onclick = function() {
            console.log(i);
        }
    }
</script>

显然，上面那么写是不行的，因为当执行onclick的时候，循环都已经走完了，每次输出i都是4。可以用闭包的方法解决：
<script>
    var heros = document.getElementById('heros');
    var list = heros.children;
    for(var i = 0; i < list.length; i++) {
        var li = list[i];
        (function(i) {
            li.onclick = function() {
                console.log(i);
            }
        })(i); 
    }
</script>
把onclick事件用自调用函数包裹起来，于是自调用函数和conlick创建的函数构成了闭包，自调用函数的参数i就会被保存起来以备onclick函数使用。

2.要求点击按钮改变文字大小
<body>
    点击按钮改变我的大小
    <input type="button" id="btn1" value="按钮1" />
    <input type="button" id="btn2" value="按钮2" />
    <input type="button" id="btn3" value="按钮3" />
    
    <script>
        var btn1 = doucument.getElementById('btn1');
        var btn2 = doucument.getElementById('btn2');
        var btn3 = doucument.getElementById('btn3');
        
        function getFun(size) {
            return function(){
                document.body.style.fontSize = size + 'px';
            }
        }
        
        btn1.onclick = getFun(12);
        btn2.onclick = getFun(14);
        btn3.onclick = getFun(16);
    </script>
</body>
